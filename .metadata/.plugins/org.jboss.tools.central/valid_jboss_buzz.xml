<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title type="html">Keycloak 12.0.3 released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/uAH8QdcS5Wk/keycloak-1203-released.html" /><author><name /></author><id>https://www.keycloak.org//2021/02/keycloak-1203-released.html</id><updated>2021-02-16T00:00:00Z</updated><content type="html">To download the release go to . ALL RESOLVED ISSUES The full list of resolved issues are available in UPGRADING Before you upgrade remember to backup your database and check the for anything that may have changed.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/uAH8QdcS5Wk" height="1" width="1" alt=""/&gt;</content><dc:creator /><feedburner:origLink>https://www.keycloak.org//2021/02/keycloak-1203-released.html</feedburner:origLink></entry><entry><title>Integrating Spring Boot with Red Hat Integration Service Registry</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/n4TfcdA_VnQ/" /><category term="Event-Driven" /><category term="Java" /><category term="Kubernetes" /><category term="Microservices" /><category term="Spring Boot" /><category term="amq streams" /><category term="Apicurio" /><category term="Apicurio Registry" /><category term="Red Hat Integration" /><category term="service registry" /><author><name>Roman Martin Gil</name></author><id>https://developers.redhat.com/blog/?p=779347</id><updated>2021-02-15T08:00:01Z</updated><published>2021-02-15T08:00:01Z</published><content type="html">&lt;p&gt;Most of the new cloud-native applications and &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt; designs are based on &lt;a href="https://developers.redhat.com/topics/event-driven/"&gt;event-driven architecture&lt;/a&gt; (EDA), responding to real-time information by sending and receiving information about individual events. This kind of architecture relies on asynchronous, non-blocking communication between event producers and consumers through an event streaming backbone such as &lt;a href="https://developers.redhat.com/blog/2019/12/04/understanding-red-hat-amq-streams-components-for-openshift-and-kubernetes-part-1/"&gt;Red Hat AMQ Streams&lt;/a&gt; running on top of &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. In scenarios where many different events are being managed, defining a governance model where each event is defined as an API is critical. That way, producers and consumers can produce and consume checked and validated events. We can use a service registry as a datastore for events defined as APIs.&lt;/p&gt; &lt;p&gt;From my field experience working with many clients, I&amp;#8217;ve found the most typical architecture consists of the following components:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;AMQ Streams to deploy &lt;a href="https://developers.redhat.com/topics/kafka-kubernetes"&gt;Apache Kafka&lt;/a&gt; clusters as the streaming backbone.&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://www.apicur.io/registry/"&gt;Apicurio Registry&lt;/a&gt; for storing events as APIs.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/courses/openshift/getting-started"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; to deploy and run the different components.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/topics/spring-boot"&gt;Spring Boot&lt;/a&gt; as the framework for developing &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; client applications.&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://avro.apache.org/"&gt;Avro&lt;/a&gt; as the data serialization system to declare schemas as event APIs.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In this article, you will learn how to easily integrate your Spring Boot applications with &lt;a href="https://developers.redhat.com/blog/2019/12/16/getting-started-with-red-hat-integration-service-registry/"&gt;Red Hat Integration Service Registry&lt;/a&gt;, which is based on the open source &lt;a target="_blank" rel="nofollow" href="https://github.com/apicurio/apicurio-registry"&gt;Apicurio Registry&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-779347"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Red Hat Integration Service Registry&lt;/h2&gt; &lt;p&gt;Service Registry is a datastore for sharing standard event schemas and API designs across APIs and event-driven architectures. Service Registry decouples the structure of your data from your client applications so that you can share and manage your data types and API descriptions at runtime. It also reduces costs by decreasing the overall message size, and it creates efficiencies by increasing the consistent reuse of schemas and API designs across your organization.&lt;/p&gt; &lt;p&gt;Some of the most common use cases for Service Registry are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Client applications that dynamically push or pull the latest schema updates to or from the service registry at runtime without redeploying.&lt;/li&gt; &lt;li&gt;Developer teams that query the registry for existing schemas required for services already deployed in production.&lt;/li&gt; &lt;li&gt;Developer teams that register new schemas required for new services in development or rolling to production.&lt;/li&gt; &lt;li&gt;Stored schemas used to serialize and deserialize messages. Client applications can reference the stored schemas to ensure the messages they send and receive are compatible with the schemas.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Service Registry provides the following main features:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Support for multiple payload formats for standard event schemas and API specifications.&lt;/li&gt; &lt;li&gt;Pluggable storage options, including AMQ Streams, an embedded Infinispan in-memory data grid,Â and PostgreSQL database.&lt;/li&gt; &lt;li&gt;Registry content management using a web console, REST API commands, Maven plug-ins, or a Java client.&lt;/li&gt; &lt;li&gt;Rules for content validation and version compatibility to govern how registry content evolves.&lt;/li&gt; &lt;li&gt;Support for the Apache Kafka schema registry, including &lt;a href="https://developers.redhat.com/blog/2020/02/14/using-secrets-in-apache-kafka-connect-configuration/"&gt;Kafka Connect&lt;/a&gt; integration for external systems.&lt;/li&gt; &lt;li&gt;A client serializer/deserializer (&lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/SerDes"&gt;SerDes&lt;/a&gt;) to validate Kafka and other message types at runtime.&lt;/li&gt; &lt;li&gt;A cloud-native &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus Java runtime&lt;/a&gt; for low memory footprint and fast deployment times.&lt;/li&gt; &lt;li&gt;Compatibility with existing Confluent schema registry client applications.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/topics/kubernetes/operators"&gt;Operator&lt;/a&gt;-based installation on OpenShift.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Introducing Service Registry for client applications&lt;/h2&gt; &lt;p&gt;The typical workflow for introducing a new service registry to our architecture is to:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Declare the event schema using common data formats like Apache Avro, a JSON schema, Google Protocol Buffers, OpenAPI, AsyncAPI, GraphQL, Kafka Connect schemas, WSDL, or XML schemas (XSD).&lt;/li&gt; &lt;li&gt;Register the schema as an artifact in the service registry using the &lt;a href="https://developers.redhat.com/blog/2020/06/11/first-look-at-the-new-apicurio-registry-ui-and-operator/"&gt;Service Registry UI&lt;/a&gt;, REST API, Maven plug-in, or a Java client. Client applications can then use the schema to validate that messages conform to the correct data structure at runtime.&lt;/li&gt; &lt;li&gt;Use Kafka producer applications and serializers to encode messages that conform to a specific event schema.&lt;/li&gt; &lt;li&gt;Use Kafka consumer applications and deserializers to validate that messages have been serialized using the correct schema based on a specific schema ID.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;This workflow ensures consistent schema use and helps to prevent data errors at runtime.&lt;/p&gt; &lt;p&gt;The next sections discuss this workflow at a high level using a Spring Boot application. See the article&amp;#8217;s GitHub repository for the &lt;a target="_blank" rel="nofollow" href="https://github.com/rmarting/kafka-clients-sb-sample"&gt;complete sample application source code&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Register an Avro schema in Service Registry&lt;/h2&gt; &lt;p&gt;Avro provides a &lt;a target="_blank" rel="nofollow" href="https://avro.apache.org/docs/current/spec.html#schemas"&gt;JSON schema specification&lt;/a&gt; to declare a variety of data structures. This simple example defines a message event:&lt;/p&gt; &lt;pre&gt;{ "name": "Message", "namespace": "com.rmarting.kafka.schema.avro", "type": "record", "doc": "Schema for a Message.", "fields": [ { "name": "timestamp", "type": "long", "doc": "Message timestamp." }, { "name": "content", "type": "string", "doc": "Message content." } ] }&lt;/pre&gt; &lt;p&gt;Avro also provides a &lt;a target="_blank" rel="nofollow" href="https://avro.apache.org/docs/current/gettingstartedjava.html"&gt;Maven plug-in&lt;/a&gt; to autogenerate Java classes based on the provided schema definitions (.avsc files).&lt;/p&gt; &lt;p&gt;Once we have a schema, we can publish it in Service Registry. Publishing a schema in the registry makes it ready for client applications to use at runtime. The &lt;a target="_blank" rel="nofollow" href="https://www.apicur.io/registry/docs/apicurio-registry/1.3.3.Final/getting-started/assembly-managing-registry-artifacts-maven.html"&gt;Apicurio Registry Maven plug-in&lt;/a&gt; makes it easy to publish our schema to Service Registry. We add a simple definition in our &lt;code&gt;pom.xml&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&amp;#60;plugin&amp;#62; &amp;#60;groupId&amp;#62;io.apicurio&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;apicurio-registry-maven-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${apicurio.version}&amp;#60;/version&amp;#62; &amp;#60;executions&amp;#62; &amp;#60;execution&amp;#62; &amp;#60;phase&amp;#62;generate-sources&amp;#60;/phase&amp;#62; &amp;#60;goals&amp;#62; &amp;#60;goal&amp;#62;register&amp;#60;/goal&amp;#62; &amp;#60;/goals&amp;#62; &amp;#60;configuration&amp;#62; &amp;#60;registryUrl&amp;#62;${apicurio.registry.url}&amp;#60;/registryUrl&amp;#62; &amp;#60;artifactType&amp;#62;AVRO&amp;#60;/artifactType&amp;#62; &amp;#60;artifacts&amp;#62; &amp;#60;!-- Schema definition for TopicIdStrategy strategy --&amp;#62; &amp;#60;messages-value&amp;#62;${project.basedir}/src/main/resources/schemas/message.avsc&amp;#60;/messages-value&amp;#62; &amp;#60;/artifacts&amp;#62; &amp;#60;/configuration&amp;#62; &amp;#60;/execution&amp;#62; &amp;#60;/executions&amp;#62; &amp;#60;/plugin&amp;#62;&lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: With the Apicurio Registry Maven plug-in, we could use the &lt;a target="_blank" rel="nofollow" href="https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html"&gt;Maven build lifecycle&lt;/a&gt;Â to define or extend our application lifecycle management and &lt;a href="https://developers.redhat.com/topics/ci-cd"&gt;CI/CD&lt;/a&gt; pipelines. For example, we could extend the lifecycle to publish or update schemas whenever a new version was released. Explaining how to do it is not the objective of this article, but it&amp;#8217;s something you could explore.&lt;/p&gt; &lt;p&gt;As soon as we publish our schema to Service Registry, we can manage it from the Service Registry UI shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_779587" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f58c2828d45e.png"&gt;&lt;img aria-describedby="caption-attachment-779587" class="wp-image-779587 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f58c2828d45e-1024x681.png" alt="The Service Registry user interface." width="640" height="426" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f58c2828d45e-1024x681.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f58c2828d45e-300x200.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f58c2828d45e-768x511.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f58c2828d45e.png 1102w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-779587" class="wp-caption-text"&gt;Figure 1: Manage your new schema in the Service Registry UI.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Integrate Spring Boot, Apache Kafka, and AMQ Streams&lt;/h2&gt; &lt;p&gt;Spring Boot provides theÂ &lt;a target="_blank" rel="nofollow" href="https://spring.io/projects/spring-kafka"&gt;Spring Kafka&lt;/a&gt; project to produce and consume messages to and from Apache Kafka. Using it is straightforward once we add the following dependency in our &lt;code&gt;pom.xml&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.kafka&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-kafka&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62;&lt;/pre&gt; &lt;p&gt;Adding the following property to your &lt;code&gt;application.properties&lt;/code&gt; file connects your application with the AMQ Streams cluster:&lt;/p&gt; &lt;pre&gt;spring.kafka.bootstrap-servers = ${kafka.bootstrap-servers}&lt;/pre&gt; &lt;p&gt;Service Registry provides &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_integration/2020-q2/html-single/getting_started_with_service_registry/index#using-kafka-client-serdes"&gt;Kafka client serializers/deserializers&lt;/a&gt; for Kafka producer and consumer applications. Include the following dependency to add them to your application:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.apicurio&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;apicurio-registry-utils-serde&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${apicurio.version}&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62;&lt;/pre&gt; &lt;h2&gt;Produce messages from Spring Boot&lt;/h2&gt; &lt;p&gt;Spring Kafka provides a set of properties and beans to declare Kafka producers to send messages (Avro schema instances, in this case) to Apache Kafka. The two most important properties are &lt;code&gt;spring.kafka.producer.key-serializer&lt;/code&gt;, which identifies the serializer class to serialize the Kafka record&amp;#8217;s key, and &lt;code&gt;spring.kafka.producer.value-serializer&lt;/code&gt;, which identifies the serializer class to serialize the Kafka record&amp;#8217;s value.&lt;/p&gt; &lt;p&gt;We have to add specific values in these properties so that the serialization process using Avro schemas can be registered in Service Registry:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The serializer class to use Avro schemas provided by the Apicurio SerDe class: &lt;code&gt;io.apicurio.registry.utils.serde.AvroKafkaSerializer&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;The Apicurio service registry endpoint to validate schemas: &lt;code&gt;apicurio.registry.url&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;The &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_integration/2020-q2/html-single/getting_started_with_service_registry/index#service-registry-concepts-strategy-service-registry"&gt;Apicurio service strategy&lt;/a&gt; to look up the schema definition: &lt;code&gt;apicurio.registry.artifact-id&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here&amp;#8217;s a sample configuration for a producer template:&lt;/p&gt; &lt;pre&gt;# Spring Kafka Producer spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer spring.kafka.producer.value-serializer=io.apicurio.registry.utils.serde.AvroKafkaSerializer spring.kafka.producer.properties.apicurio.registry.url = ${apicurio.registry.url} spring.kafka.producer.properties.apicurio.registry.artifact-id = io.apicurio.registry.utils.serde.strategy.TopicIdStrategy&lt;/pre&gt; &lt;p&gt;We can use the following properties to declare a &lt;code&gt;KafkaTemplate&lt;/code&gt; to send messages (based on our &lt;code&gt;Message&lt;/code&gt; schema):&lt;/p&gt; &lt;pre&gt;@Bean public ProducerFactory&amp;#60;String, Message&amp;#62; producerFactory(KafkaProperties kafkaProperties) { Map&amp;#60;String, Object&amp;#62; configProps = kafkaProperties.buildProducerProperties(); return new DefaultKafkaProducerFactory&amp;#60;&amp;#62;(configProps); } @Bean public KafkaTemplate&amp;#60;String, Message&amp;#62; kafkaTemplate(KafkaProperties kafkaProperties) { return new KafkaTemplate&amp;#60;&amp;#62;(producerFactory(kafkaProperties)); }&lt;/pre&gt; &lt;p&gt;Finally, we can send messagesÂ (storing the artifact ID from Service Registry) to Apache Kafka:&lt;/p&gt; &lt;pre&gt;@Autowired private KafkaTemplate&amp;#60;String, Message&amp;#62; kafkaTemplate; SendResult&amp;#60;String, Message&amp;#62; record = kafkaTemplate.send(topicName, message).get();&lt;/pre&gt; &lt;p&gt;The message will be serialized, adding the global ID associated with the schema used for this record. It will be important for the Kafka consumer applications to consume the global ID later.&lt;/p&gt; &lt;h2&gt;Consume messages from Spring Boot&lt;/h2&gt; &lt;p&gt;Spring Kafka also provides properties and beans to declare Kafka consumers to consume messages (Avro schema instances) from the Apache Kafka cluster. The most important properties are &lt;code&gt;spring.kafka.consumer.key-deserializer&lt;/code&gt;, which identifies the deserializer class to deserialize the Kafka record&amp;#8217;s key, and &lt;code&gt;spring.kafka.consumer.value-deserializer&lt;/code&gt;, which identifies the deserializer class to deserialize the Kafka record&amp;#8217;s value.&lt;/p&gt; &lt;p&gt;Once again, we have to add specific valuesâin this case, to allow the deserialization process using Avro schemas registered in Service Registry:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The deserializer class to use Avro schemas, which is provided by the Apicurio SerDe class: &lt;code&gt;io.apicurio.registry.utils.serde.AvroKafkaDeserializer&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Th Apicurio service registry endpoint to get valid schemas: &lt;code&gt;apicurio.registry.url&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here&amp;#8217;s a sample configuration for a consumer template:&lt;/p&gt; &lt;pre&gt;# Spring Kafka Consumer spring.kafka.listener.ack-mode = manual spring.kafka.consumer.group-id = spring-kafka-clients-sb-sample-group spring.kafka.consumer.auto-offset-reset = earliest spring.kafka.consumer.enable-auto-commit=false spring.kafka.consumer.key-deserializer = org.apache.kafka.common.serialization.StringDeserializer spring.kafka.consumer.value-deserializer = io.apicurio.registry.utils.serde.AvroKafkaDeserializer spring.kafka.consumer.properties.apicurio.registry.url = ${apicurio.registry.url} # Use Specific Avro classes instead of the GenericRecord class definition spring.kafka.consumer.properties.apicurio.registry.use-specific-avro-reader = true&lt;/pre&gt; &lt;p&gt;We can declare a &lt;code&gt;KafkaListener&lt;/code&gt; to consume messages (based on our &lt;code&gt;Message&lt;/code&gt; schema) as:&lt;/p&gt; &lt;pre&gt;@KafkaListener(topics = {"messages"}) public void handleMessages(@Payload Message message, @Headers Map&amp;#60;String, Object&amp;#62; headers, Acknowledgment acknowledgment) { LOGGER.info("Received record from Topic-Partition '{}-{}' with Offset '{}' -&amp;#62; Key: '{}' - Value '{}'", headers.get(KafkaHeaders.RECEIVED_TOPIC), headers.get(KafkaHeaders.RECEIVED_PARTITION_ID), headers.get(KafkaHeaders.OFFSET), headers.get(KafkaHeaders.MESSAGE_KEY), message.get("content")); // Commit message acknowledgment.acknowledge(); }&lt;/pre&gt; &lt;p&gt;The schema is retrieved by the deserializer, which uses the global ID written into the message being consumed. With that, we&amp;#8217;re done!&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;In this article, you&amp;#8217;ve seen how to integrate Spring Boot applications with Red Hat Integration Service Registry and AMQ Streams to build your event-driven architecture. Using these components together gives you the following benefits:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Consistent schema use between client applications.&lt;/li&gt; &lt;li&gt;Help with preventing data errors at runtime.&lt;/li&gt; &lt;li&gt;A defined governance model in your data schemas (such as for versions, rules, and validations).&lt;/li&gt; &lt;li&gt;Easy integration with Java client applications and components.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;See the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_integration/2020-q2/"&gt;Red Hat Integration&lt;/a&gt; homepage and &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_integration/2020-q2/html/getting_started_with_service_registry/index"&gt;Service Registry documentation&lt;/a&gt; for more about these components. Also, see &lt;a href="https://developers.redhat.com/blog/2020/06/11/first-look-at-the-new-apicurio-registry-ui-and-operator/"&gt;&lt;i&gt;First look at the new Apicurio Registry UI and Operator&lt;/i&gt;&lt;/a&gt; for more about using Service Registry in any &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; or OpenShift cluster.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F15%2Fintegrating-spring-boot-with-red-hat-integration-service-registry%2F&amp;#38;linkname=Integrating%20Spring%20Boot%20with%20Red%20Hat%20Integration%20Service%20Registry" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F15%2Fintegrating-spring-boot-with-red-hat-integration-service-registry%2F&amp;#38;linkname=Integrating%20Spring%20Boot%20with%20Red%20Hat%20Integration%20Service%20Registry" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F15%2Fintegrating-spring-boot-with-red-hat-integration-service-registry%2F&amp;#38;linkname=Integrating%20Spring%20Boot%20with%20Red%20Hat%20Integration%20Service%20Registry" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F15%2Fintegrating-spring-boot-with-red-hat-integration-service-registry%2F&amp;#38;linkname=Integrating%20Spring%20Boot%20with%20Red%20Hat%20Integration%20Service%20Registry" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F15%2Fintegrating-spring-boot-with-red-hat-integration-service-registry%2F&amp;#38;linkname=Integrating%20Spring%20Boot%20with%20Red%20Hat%20Integration%20Service%20Registry" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F15%2Fintegrating-spring-boot-with-red-hat-integration-service-registry%2F&amp;#38;linkname=Integrating%20Spring%20Boot%20with%20Red%20Hat%20Integration%20Service%20Registry" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F15%2Fintegrating-spring-boot-with-red-hat-integration-service-registry%2F&amp;#38;linkname=Integrating%20Spring%20Boot%20with%20Red%20Hat%20Integration%20Service%20Registry" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F15%2Fintegrating-spring-boot-with-red-hat-integration-service-registry%2F&amp;#038;title=Integrating%20Spring%20Boot%20with%20Red%20Hat%20Integration%20Service%20Registry" data-a2a-url="https://developers.redhat.com/blog/2021/02/15/integrating-spring-boot-with-red-hat-integration-service-registry/" data-a2a-title="Integrating Spring Boot with Red Hat Integration Service Registry"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/15/integrating-spring-boot-with-red-hat-integration-service-registry/"&gt;Integrating Spring Boot with Red Hat Integration Service Registry&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/n4TfcdA_VnQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Most of the new cloud-native applications and microservices designs are based on event-driven architecture (EDA), responding to real-time information by sending and receiving information about individual events. This kind of architecture relies on asynchronous, non-blocking communication between event producers and consumers through an event streaming backbone such as Red Hat AMQ Streams running on top [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/15/integrating-spring-boot-with-red-hat-integration-service-registry/"&gt;Integrating Spring Boot with Red Hat Integration Service Registry&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/15/integrating-spring-boot-with-red-hat-integration-service-registry/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">779347</post-id><dc:creator>Roman Martin Gil</dc:creator><dc:date>2021-02-15T08:00:01Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/15/integrating-spring-boot-with-red-hat-integration-service-registry/</feedburner:origLink></entry><entry><title type="html">Infinispan 12.0.1.Final âLockdownâ</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/__7eKygf9Nc/infinispan-12-0-1" /><author><name>Ryan Emerson</name></author><id>/blog/2021/02/12/infinispan-12-0-1</id><updated>2021-02-12T12:00:00Z</updated><content type="html">Dear Infinispan community, we hope youâve been enjoying all the new goodies included in our latest major release, Infinispan 12. We now have a brand new micro release for you which addresses a number of issues. The following list shows what we have fixed: COMPONENT UPGRADE * - Upgrade console to 0.13.1.Final ENHANCEMENT * - Implement proper form login and digest login * - Implicit connectors for the single-port endpoint * - Add addtional DEBUG logs to Backup/Restore operations FEATURE REQUEST * - Add property to disable test execution BUG * - Replicated cache get ignores value in zero-capacity nodes * - CacheEntryCloudEventsTest test failures * - Get entry broken in protobuf caches * - Fix IracWriteSkewTest test * - StatsTest random failures * - Licenses are not properly generated in console * - Functional commands break in replicated caches on zero-capacity nodes * - LocalIndexSyncStateTransferTest random failures * - ReplicationIndexTest random failures * - GlobalState incompatibility between 11.x and 12.x * - Tests failing due to relying on published images * - CLI Batch files returns exit code 0 on error * - Cannot retrieve the keyset of a cache (ISPN000287) * - IllegalArgumentException in VoidResponseCollector: Self-suppression not permitted * - Hot Rod iteration shouldnât require ADMIN permission * - When a value is json but not protobuf the console fails * - Hot Rod client has too many Elytron dependencies TASK * - Upgrade logo in Operator Hub&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/__7eKygf9Nc" height="1" width="1" alt=""/&gt;</content><dc:creator>Ryan Emerson</dc:creator><feedburner:origLink>http://tools.jboss.org/blog/2021/02/12/infinispan-12-0-1</feedburner:origLink></entry><entry><title>Developing your own custom devfiles for odo 2.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/p2RepYy6GgU/" /><category term="Containers" /><category term="Developer Tools" /><category term="Event-Driven" /><category term="Java" /><category term="Kubernetes" /><category term="custom devfile" /><category term="devfiles" /><category term="odo" /><category term="openshift" /><category term="poststart" /><author><name>Gorkem Ercan</name></author><id>https://developers.redhat.com/blog/?p=836997</id><updated>2021-02-12T08:00:17Z</updated><published>2021-02-12T08:00:17Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/products/odo/overview"&gt;Odo 2.0&lt;/a&gt; introduces a configuration file named &lt;code&gt;devfile.yaml&lt;/code&gt;. Odo uses this configuration file to set up cloud-native projects and determine the actions required for events such as building, running, and debugging a project. If you are an &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/"&gt;Eclipse Che&lt;/a&gt; user, &lt;code&gt;devfile.yaml&lt;/code&gt; should sound familiar: Eclipse Che uses devfiles to express developer workspaces, and they have proven to be flexible to accommodateÂ a variety of needs.&lt;/p&gt; &lt;p&gt;Odo 2.0 comes with a built-in catalog of devfiles for various project types, so you do not necessarily need to write or modify a devfile to start a new project. You can also create custom devfiles and contribute them to odo&amp;#8217;s devfile catalog. This article explores how to create a devfile to adopt an existing development flow to run on a &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; cluster. Our example project is based on &lt;a target="_blank" rel="nofollow" href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt;, a framework for generating websites. Gatsby comes with its own developer tools and recommended development flow, so it presents a good example for adopting existing flows for Kubernetes.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: See &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2020/10/06/kubernetes-integration-and-more-in-odo-2-0/"&gt;Kubernetes integration and more in odo 2.0&lt;/a&gt;&lt;/em&gt; for more about devfiles and other new features in this latest release.&lt;/p&gt; &lt;h2&gt;Anatomy of a devfile&lt;/h2&gt; &lt;p&gt;Before we begin working with the example, letâs take a quick look at the anatomy of a devfile.&lt;/p&gt; &lt;p&gt;Other than the &lt;code&gt;schemaVersion&lt;/code&gt;, no other properties are mandatory on a devfile. This flexibility lets developers use devfiles for multiple purposes. A devfile can be generic for a technology base or specific to a project, and projects can inherit and override parts of other devfiles.&lt;/p&gt; &lt;p&gt;Components, commands, and events are the most commonly used devfile properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Components&lt;/b&gt; describe the parts of the development environment that need to be created. Examples include runtime containers and Kubernetes resources.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Commands&lt;/b&gt; describe the predefined commands to be used to achieve specific development goals with the provided tools.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Events&lt;/b&gt; bind commands to the lifecycle of the developer environment. Currently, there are four events: &lt;code&gt;postStart&lt;/code&gt;, &lt;code&gt;postStop&lt;/code&gt;, &lt;code&gt;preStart&lt;/code&gt;, and &lt;code&gt;preStop&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Implement a devfile&lt;/h2&gt; &lt;p&gt;You&amp;#8217;ve had a quick introduction to devfiles and their three most commonly used properties. Now, let&amp;#8217;s apply what you&amp;#8217;ve learned. For this example, we will project instructions from the &lt;a target="_blank" rel="nofollow" href="https://www.gatsbyjs.com/docs/"&gt;Gatsby documentation&lt;/a&gt; into a devfile, which we&amp;#8217;ll use to develop a website on Kubernetes.&lt;/p&gt; &lt;h3&gt;Select a base image&lt;/h3&gt; &lt;p&gt;Because the application runs as a container, we&amp;#8217;ll start by selecting a base image and defining it as a component:&lt;/p&gt; &lt;pre&gt;schemaVersion: 2.0.0 components: Â Â - name: gatsby container: Â Â  image: quay.io/eclipse/che-nodejs10-ubi:nightly Â Â  mountSources: true Â Â  memoryLimit: 700Mi Â Â  endpoints: Â Â Â Â  - name: web Â Â Â Â Â Â  targetPort: 8000 &lt;/pre&gt; &lt;p&gt;Itâs worth mentioning the container&amp;#8217;s &lt;code&gt;mountSources&lt;/code&gt; property. Odo uses this value as a hint for synchronizing your local files to the container running on your Kubernetes cluster.&lt;/p&gt; &lt;h3&gt;Define the commands&lt;/h3&gt; &lt;p&gt;Next, letâs define the commands that we&amp;#8217;ll use to build and run the application. The two commands that we need to define will run on the application&amp;#8217;s &lt;code&gt;gatsby&lt;/code&gt; component. The &lt;code&gt;gatsby-develop&lt;/code&gt; command starts the application in development mode. The &lt;code&gt;setup-gatsby-cli&lt;/code&gt; command sets up Gatsby&amp;#8217;s development tools on the &lt;code&gt;gatsby&lt;/code&gt; component:&lt;/p&gt; &lt;pre&gt;commands: Â Â - id: gatsby-develop exec: Â Â  commandLine: "gatsby develop -H 0.0.0.0" Â Â  component: gatsby Â Â  group: Â Â Â Â  kind: run Â Â  attributes: Â Â Â Â  restart: "false" Â Â - id: setup-gatsby-cli exec: Â Â  commandLine: "npm install -g gatsby-cli &amp;#38;&amp;#38; npm install" Â Â  component: gatsby &lt;/pre&gt; &lt;h3&gt;Define the events&lt;/h3&gt; &lt;p&gt;Finally, we define a &lt;code&gt;postStart&lt;/code&gt; event to optimize the setup once a component has started:&lt;/p&gt; &lt;pre&gt;events: Â Â postStart: - setup-gatsby-cli &lt;/pre&gt; &lt;h2&gt;Create and push the example application&lt;/h2&gt; &lt;p&gt;Assuming you have odo and the Gatsby CLI installed locally, you can put your newly acquired devfile to work. Here are the commands to create and push a simple Gatsby site using odo:&lt;/p&gt; &lt;pre&gt;gatsby new hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world cd hello-world ## create or copy devfile.yaml ## from https://gist.github.com/gorkem/78fd17864218a125b2bd9146728a1af8 odo push &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;While odo comes with a built-in catalog of devfiles, you can also develop your own. Creating custom devfiles lets you integrate the technologies that you work with into the Kubernetes environment. Once you&amp;#8217;ve created a devfile, you can contribute it to the devfile catalog for wider community reach.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#38;linkname=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#38;linkname=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#38;linkname=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#38;linkname=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#38;linkname=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#38;linkname=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#38;linkname=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#038;title=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" data-a2a-url="https://developers.redhat.com/blog/2021/02/12/developing-your-own-custom-devfiles-for-odo-2-0/" data-a2a-title="Developing your own custom devfiles for odo 2.0"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/12/developing-your-own-custom-devfiles-for-odo-2-0/"&gt;Developing your own custom devfiles for odo 2.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/p2RepYy6GgU" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Odo 2.0 introduces a configuration file named devfile.yaml. Odo uses this configuration file to set up cloud-native projects and determine the actions required for events such as building, running, and debugging a project. If you are an Eclipse Che user, devfile.yaml should sound familiar: Eclipse Che uses devfiles to express developer workspaces, and they have [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/12/developing-your-own-custom-devfiles-for-odo-2-0/"&gt;Developing your own custom devfiles for odo 2.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/12/developing-your-own-custom-devfiles-for-odo-2-0/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">836997</post-id><dc:creator>Gorkem Ercan</dc:creator><dc:date>2021-02-12T08:00:17Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/12/developing-your-own-custom-devfiles-for-odo-2-0/</feedburner:origLink></entry><entry><title>Enhancing the development loop with Quarkus remote development</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0TQLwfOsFhs/" /><category term="Containers" /><category term="Java" /><category term="Kubernetes" /><category term="Quarkus" /><category term="live coding" /><category term="mutable application" /><category term="openshift" /><category term="remote development" /><author><name>Daniel Oh</name></author><id>https://developers.redhat.com/blog/?p=859517</id><updated>2021-02-11T08:00:36Z</updated><published>2021-02-11T08:00:36Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; is an established foundation layer for &lt;a href="https://developers.redhat.com/topics/microservices"&gt;cloud-native microservices&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;serverless architectures&lt;/a&gt;. By automating application deployment, scaling, and management, Kubernetes changes the &lt;a href="https://developers.redhat.com/blog/2020/06/16/enterprise-kubernetes-development-with-odo-the-cli-tool-for-developers/"&gt;developer&amp;#8217;s daily workflow&lt;/a&gt; in terms of inner loop development (local coding, building, running, and testing the application) and outer loop development (integration testing, continuous deployment, and security). Developers using Kubernetes also must plan for containerization, debugging code inside pods, and automating test cases.&lt;/p&gt; &lt;p&gt;In this article, you&amp;#8217;ll see how using &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt; remote development enhances the development loop on Kubernetes. We will set up a new Quarkus project then configure it for live coding on a remote &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; cluster, just like you would in your local development environment.&lt;/p&gt; &lt;h2&gt;Step 1: Create a new Quarkus project&lt;/h2&gt; &lt;p&gt;Weâll use a Maven plug-in to scaffold a new project with the following command:&lt;/p&gt; &lt;pre&gt;$ mvn io.quarkus:quarkus-maven-plugin:1.11.1.Final:create \ Â Â Â -DprojectGroupId=org.acme \ Â Â Â -DprojectArtifactId=quarkus-remote \ Â Â Â -DprojectVersion=1.0.0-SNAPSHOT \ Â Â Â -DclassName="org.acme.GreeterResource" \ Â Â Â Â -Dextensions="openshift"&lt;/pre&gt; &lt;p&gt;This command generates a &lt;code&gt;quarkus-remote&lt;/code&gt; directory that includes a new Quarkus project. When you open the &lt;code&gt;GreeterResource.java&lt;/code&gt; class file in &lt;code&gt;src/main/java/org/acme&lt;/code&gt;, you will see a simple RESTful API:&lt;/p&gt; &lt;pre&gt;@Path("/hello") public class GreeterResource { Â Â @GET Â Â @Produces(MediaType.TEXT_PLAIN) Â Â public String hello() { Â Â Â Â Â Â return "Hello RESTEasy"; Â Â } }&lt;/pre&gt; &lt;h2&gt;Step 2: Live coding in your local environment&lt;/h2&gt; &lt;p&gt;Quarkus comes with a built-in development mode for hot deployment with background compilation. After changing the code, resources, or configuration in a running application, you only need to refresh your web browser or invoke the project&amp;#8217;s RESTful API for the changes to take effect automatically. To run your application locally, execute the following command in the project&amp;#8217;s home directory:&lt;/p&gt; &lt;pre&gt;$ mvn quarkus:dev&lt;/pre&gt; &lt;p&gt;You will see that live coding has been activated:&lt;/p&gt; &lt;pre&gt;INFOÂ  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.&lt;/pre&gt; &lt;p&gt;Invoke the application&amp;#8217;s RESTful API endpoint with a&lt;code&gt;curl&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;$ curl http:/localhost:8080/hello&lt;/pre&gt; &lt;p&gt;The output should be:&lt;/p&gt; &lt;pre&gt;Hello RESTEasy&lt;/pre&gt; &lt;p&gt;Return to the &lt;code&gt;GreeterResource.java&lt;/code&gt; class file in &lt;code&gt;src/main/java/org/acme&lt;/code&gt;. Change the code in the &lt;code&gt;hello()&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;return "Hello RESTEasy from Local";&lt;/pre&gt; &lt;p&gt;Save the file, then use the same &lt;code&gt;curl&lt;/code&gt; command to re-invoke the endpoint. The new output should be:&lt;/p&gt; &lt;pre&gt;Hello RESTEasy from Local&lt;/pre&gt; &lt;p&gt;Invoking the RESTful API triggers a scan of the workspace. If any changes are detected, the Java files are compiled, and the application is redeployed, and the redeployed application services your request. If you check the logs in your running Quarkus runtime, you should see the detected source files:&lt;/p&gt; &lt;pre&gt;INFOÂ  [io.qua.dep.dev.RuntimeUpdatesProcessor] (vert.x-worker-thread-4) Changed source files detected, recompiling [/Users/danieloh/Downloads/quarkus-remote/src/main/java/me/daniel/GreeterResource.java] &lt;/pre&gt; &lt;p&gt;Hit &lt;b&gt;CTRL+C&lt;/b&gt; when you are ready to stop the application.&lt;/p&gt; &lt;h2&gt;Step 3: Build and deploy a mutable application&lt;/h2&gt; &lt;p&gt;What if you want to expand the inner loop development cycle to a remote container environment such as Kubernetes or OpenShift? You can configure your application in remote development mode to make changes to your local files immediately visible in your remote container environment.&lt;/p&gt; &lt;p&gt;To develop remotely, you need to build a mutable application using the &lt;code&gt;mutable-jar&lt;/code&gt; format. You can then use the OpenShift extension and Maven plug-in to deploy the application to your remote OpenShift cluster. Append the following configurations to your Quarkus project&amp;#8217;s &lt;code&gt;application.properties&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;# Mutable Jar configurations quarkus.package.type=mutable-jar quarkus.live-reload.password=changeit # OpenShift Extension Configurations quarkus.container-image.build=true quarkus.kubernetes-client.trust-certs=true quarkus.kubernetes.deployment-target=openshift quarkus.openshift.expose=true quarkus.openshift.env-vars.quarkus-launch-devmode.value=true&lt;/pre&gt; &lt;p&gt;Note that you can change the password to whatever you want. It is used to secure communication between the remote side and the local side.&lt;/p&gt; &lt;h3&gt;Open the mutable application in your OpenShift cluster&lt;/h3&gt; &lt;p&gt;To log in to the OpenShift cluster, you have to install the &lt;code&gt;oc&lt;/code&gt; command-line interface and use the &lt;code&gt;oc&lt;/code&gt; login. &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.6/cli_reference/openshift_cli/getting-started-cli.html#cli-getting-started"&gt;Installation options for the CLI&lt;/a&gt; will vary depending on your operating system.&lt;/p&gt; &lt;p&gt;Assuming you have &lt;code&gt;oc&lt;/code&gt; installed, execute the following command in your Quarkus project home directory:&lt;/p&gt; &lt;pre&gt;$ oc new-project quarkus-remote $ mvn clean package -DskipTests -Dquarkus.kubernetes.deploy=true&lt;/pre&gt; &lt;p&gt;This command creates a new project in the remote OpenShift cluster. The mutable JAR will be packaged and deployed to OpenShift. The output should end with &lt;code&gt;BUILD SUCCESS&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Check the application in the OpenShift console&lt;/h3&gt; &lt;p&gt;So far, so good. Now, letâs go to the Developer console in the OpenShift cluster and then navigate the Topology view. You will see that your Quarkus application has been deployed. Click on &lt;b&gt;View logs&lt;/b&gt; to see how the mutable application is deployed, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_859527" style="width: 650px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-859527" class=" size-large wp-image-859527 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.44-AM-1024x536.png" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.44-AM-1024x536.png" alt="Figure 1. Topology View" width="640" height="335" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.44-AM-1024x536.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.44-AM-300x157.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.44-AM-768x402.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-859527" class="wp-caption-text"&gt;Figure 1: The new, mutable application in the Topology view.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You should see the output &amp;#8220;&lt;code&gt;Profile dev activated. Live Coding activated&lt;/code&gt;&amp;#8221; in the pod logs, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_859537" style="width: 650px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-859537" class=" size-large wp-image-859537 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.55-AM-1024x413.png" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.55-AM-1024x413.png" alt="Figure 2. Pod Logs" width="640" height="258" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.55-AM-1024x413.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.55-AM-300x121.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.55-AM-768x310.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-859537" class="wp-caption-text"&gt;Figure 2: The pod logs show that live coding has been activated.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Check the application&amp;#8217;s RESTful API&lt;/h3&gt; &lt;p&gt;Go back to the Topology view to access the application&amp;#8217;s RESTful API. Click the &lt;b&gt;Open URL&lt;/b&gt; icon highlighted in Figure 3.&lt;/p&gt; &lt;div id="attachment_859547" style="width: 650px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-859547" class=" size-large wp-image-859547 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.03-AM-1024x473.png" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.03-AM-1024x473.png" alt="Figure 3. Open URL" width="640" height="296" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.03-AM-1024x473.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.03-AM-300x138.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.03-AM-768x355.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-859547" class="wp-caption-text"&gt;Figure 3: Open the RESTful API URL.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Append &lt;code&gt;/hello&lt;/code&gt; at the applicationâs route URL. When you check it, you should see the same output in your local environment :&lt;/p&gt; &lt;div id="attachment_859557" style="width: 650px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-859557" class=" size-large wp-image-859557 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.14-AM-1024x221.png" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.14-AM-1024x221.png" alt="Figure 4. Access the REST API" width="640" height="138" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.14-AM-1024x221.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.14-AM-300x65.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.14-AM-768x166.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-859557" class="wp-caption-text"&gt;Figure 4: Access the RESTful API.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 4: Run the application in remote development mode&lt;/h2&gt; &lt;p&gt;The last step is to connect your local agent to the remote host on OpenShift. To start, appendÂ the &lt;code&gt;quarkus.live-reload.url&lt;/code&gt; configuration to your &lt;code&gt;application.properties&lt;/code&gt; file. Note that you will need to remove or comment the OpenShift extension configurations so that they will not trigger the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.6/builds/understanding-image-builds.html#builds-strategy-s2i-build_understanding-image-builds"&gt;source-to-image build&lt;/a&gt; when you change the code:&lt;/p&gt; &lt;pre&gt;# Mutable Jar configurations quarkus.package.type=mutable-jar quarkus.live-reload.password=changeit quarkus.live-reload.url=http://YOUR_APP_ROUTE_URL # OpenShift Extension Configurations # quarkus.container-image.build=true # quarkus.kubernetes-client.trust-certs=true # quarkus.kubernetes.deployment-target=openshift # quarkus.openshift.expose=true # quarkus.openshift.env-vars.quarkus-launch-devmode.value=true&lt;/pre&gt; &lt;p&gt;Use the &lt;code&gt;remote-dev&lt;/code&gt; command to execute the remote development mode:&lt;/p&gt; &lt;pre&gt;$ mvn quarkus:remote-dev&lt;/pre&gt; &lt;p&gt;The output should end with &lt;code&gt;Connected to remote server&lt;/code&gt;. Now you can develop in the same environment where you will run your app, with access to the same services.&lt;/p&gt; &lt;p&gt;Next, return to the &lt;code&gt;GreeterResource.java&lt;/code&gt; class file in &lt;code&gt;src/main/java/org/acme&lt;/code&gt;, then change the code in the &lt;code&gt;hello()&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;return "Hello RESTEasy from &lt;b&gt;OpenShift&lt;/b&gt;";&lt;/pre&gt; &lt;p&gt;Save the file, then refresh the browser. The output should be what you see in Figure 5.&lt;/p&gt; &lt;div id="attachment_859567" style="width: 650px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-859567" class=" size-large wp-image-859567 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.18-AM-1024x221.png" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.18-AM-1024x221.png" alt="Figure 5. Reinvoke the RESTful API" width="640" height="138" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.18-AM-1024x221.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.18-AM-300x65.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.18-AM-768x166.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-859567" class="wp-caption-text"&gt;Figure 5: Re-invoke the RESTful API.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Every time you refresh the browser, you should see that local changes are immediately visible in the remote application. An HTTP-based long polling transport synchronizes your local workspace and the remote application via HTTP calls. Here&amp;#8217;s an example of log output in the local Quarkus runtime:&lt;/p&gt; &lt;pre&gt;INFOÂ  [io.qua.dep.dev.RuntimeUpdatesProcessor] (Remote dev client thread) Changed source files detected, recompiling [/Users/danieloh/Downloads/quarkus-remote/src/main/java/me/daniel/GreeterResource.java] ... INFOÂ  [io.qua.ver.htt.dep.dev.HttpRemoteDevClient] (Remote dev client thread) Sending dev/app/me/daniel/GreeterResource.class INFOÂ  [io.qua.ver.htt.dep.dev.HttpRemoteDevClient] (Remote dev client thread) Sending quarkus-run.jar ...&lt;/pre&gt; &lt;p&gt;Awesome! You should be all set to enjoy your inner loop development experience while implementing your application&amp;#8217;s new business requirements.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Using Quarkus&amp;#8217;s remote development mode in production could cause unexpected functional changes to the running application. Remote development should only be used when the application is in development.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;You can use Quarkus to enhance the development loop by connecting the live coding features from your local machine to a remote container environment such as OpenShift. Being able to do remote development in a cloud-native Java runtime simplifies the development workflowâfrom writing code to building, running, debugging, and deploying microservices at speed. See the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/"&gt;Quarkus Guides&lt;/a&gt; for more about how Quarkus optimizes development productivity through unified configuration, zero-config with live coding, and easy injection of extensions for implementing cloud-native applications.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#38;linkname=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#38;linkname=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#38;linkname=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#38;linkname=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#38;linkname=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#38;linkname=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#38;linkname=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#038;title=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" data-a2a-url="https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development/" data-a2a-title="Enhancing the development loop with Quarkus remote development"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development/"&gt;Enhancing the development loop with Quarkus remote development&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0TQLwfOsFhs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Kubernetes is an established foundation layer for cloud-native microservices and serverless architectures. By automating application deployment, scaling, and management, Kubernetes changes the developer&amp;#8217;s daily workflow in terms of inner loop development (local coding, building, running, and testing the application) and outer loop development (integration testing, continuous deployment, and security). Developers using Kubernetes also must plan [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development/"&gt;Enhancing the development loop with Quarkus remote development&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">859517</post-id><dc:creator>Daniel Oh</dc:creator><dc:date>2021-02-11T08:00:36Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development/</feedburner:origLink></entry><entry><title type="html">WildFly 22.0.1 is released!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/RbBDg97Wwwc/" /><author><name>James R. Perkins</name></author><id>https://wildfly.org//news/2021/02/11/WildFly2201-Released/</id><updated>2021-02-11T00:00:00Z</updated><content type="html">WildFly 22.0.1.Final is now available . Itâs been about a month since the WildFly 22 release, so weâve done a small bug fix update, WildFly 22.0.1. The full list of issues resolved in WildFly 22.0.1 is available . Issues resolved in the WildFly Core update included with WildFly 22.0.1 are available . Enjoy!&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/RbBDg97Wwwc" height="1" width="1" alt=""/&gt;</content><dc:creator>James R. Perkins</dc:creator><feedburner:origLink>https://wildfly.org//news/2021/02/11/WildFly2201-Released/</feedburner:origLink></entry><entry><title type="html">Improvements of Project Authoring in Business Central</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HfkgmLUcdwE/improvements-of-project-authoring-in-business-central.html" /><author><name>Abhishek Kumar</name></author><id>https://blog.kie.org/2021/02/improvements-of-project-authoring-in-business-central.html</id><updated>2021-02-10T09:12:24Z</updated><content type="html">We have introduced some very useful features in Business Central. Now thereâs more customization for users to their needs in the authoring perspective. These features are implemented considering security and ease of use in business application development. Letâs have a look at these features in detail. OPENING PROJECTS DIRECTLY WITH URL In Business Central, we have the standalone perspective to open specific assets such as BPMN editor, Custom page editor, etc. Following the same approach now we have the ability to land on the project assets screen in a standalone view directly using the path, i.e. default://mybranch@myspace/myproject. You can enter the path param in the following URL format, CHANGE DEFAULT PAGE SIZE We can customize the number of assets per page on the project assets screen. Users can set the default page size in default preference under project preferences. The minimum value can be set as â1â. As this is the default project preference, it will affect all projects in Business Central. SECURITY PERMISSION FOR PROJECT SCREEN TOOLS/TABS You can provide permission-based access to some components on the project screen. Here is the list of components of which you can control visibility. * Project change request tab * Project metrics tab * Project toolbar In the assets screen with security permissions. Go to admin &gt; groups, select a group, and open the workbench dropdown from permissions. There you can see the options to customize the above-mentioned components. Many thanks to Paulo, Rishiraj, Tomas, and Eder for their efforts and support to deliver these features. The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HfkgmLUcdwE" height="1" width="1" alt=""/&gt;</content><dc:creator>Abhishek Kumar</dc:creator><feedburner:origLink>https://blog.kie.org/2021/02/improvements-of-project-authoring-in-business-central.html</feedburner:origLink></entry><entry><title>Add standardized support information to your Node.js modules</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/GKMeyeZuwcY/" /><category term="JavaScript" /><category term="Node.js" /><category term="Open source" /><category term="github actions" /><category term="Node modules" /><category term="nodeshift" /><category term="npm" /><category term="semantic versioning" /><author><name>Lucas Holmquist</name></author><id>https://developers.redhat.com/blog/?p=853117</id><updated>2021-02-10T08:00:47Z</updated><published>2021-02-10T08:00:47Z</published><content type="html">&lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://nodeshift.dev/"&gt;Nodeshift&lt;/a&gt; team recently improved the consistency of the projects we use to maintain our Node.js modules. We made sure that the same linter and testsâESLint and Tape, for those interestedâwere used on all projects. We also added support information for the modules we publish to the &lt;a target="_blank" rel="nofollow" href="https://docs.npmjs.com/about-npm"&gt;npm registry&lt;/a&gt;. We looked to the &lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/package-maintenance/blob/main/docs/PACKAGE-SUPPORT.md#format-and-structure"&gt;Node.js Package Maintenance Working Group&lt;/a&gt; for the standardized support information to add.&lt;/p&gt; &lt;p&gt;In this article, I detail the changes we made based on the Package Maintenance Working Group&amp;#8217;s recommended best practices. After reading the article, you&amp;#8217;ll be familiar with the recommended support information and the tools available for adding it to your Node.js modules. First, I will introduce the Node.js Package Maintenance Working Group and its purpose.&lt;/p&gt; &lt;h2&gt;The Node.js Package Maintenance Working Group&lt;/h2&gt; &lt;p&gt;The Node.js Package Maintenance Working Group was created to help package maintainers and consumers navigate the ever-growing Node.js module ecosystem. The working group has &lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/package-maintenance#goals"&gt;a few specific goals&lt;/a&gt;. One of those goals is to help package maintainers communicate with and set expectations for their users. The working group recommends providing information such as the project&amp;#8217;s level of backing, the target level of support, and what versions of Node.js will eventually be supported for every Node.js module. Users can then select modules that are a good fit for their functional and business needs.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: For a more in-depth look at the Node.js Package Maintenance Working Group&amp;#8217;s recommendations, check out &lt;a target="_blank" rel="nofollow" href="https://openjsf.org/blog/2020/09/23/node-js-package-maintenance-bridging-the-gap-between-maintainers-and-consumers/"&gt;&lt;i&gt;Node.js package maintenance: Bridging the gap between maintainers and consumers&lt;/i&gt;&lt;/a&gt; on the OpenJSF project page.&lt;/p&gt; &lt;p&gt;The working group created an initial &lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/package-maintenance/blob/main/docs/PACKAGE-SUPPORT.md"&gt;set of best practices&lt;/a&gt; that anyone who maintains and consumes packages can use when adding a support policy to their modules. The easiest way to add this standardized information to your Node.js modules is to create a separate file called &lt;code&gt;package-support.json&lt;/code&gt;, which lives at the root of the package. You can then add the support parameter to the &lt;code&gt;package.json&lt;/code&gt; with a value of &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Updating the Nodeshift modules&lt;/h2&gt; &lt;p&gt;More advanced options are available, but we decided to only add the &lt;code&gt;support: true&lt;/code&gt; parameter to our &lt;code&gt;package.json&lt;/code&gt; and store support information in a separate file, &lt;code&gt;package-support.json&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Here are the contents of the &lt;code&gt;package-support.json&lt;/code&gt; for &lt;a target="_blank" rel="nofollow" href="https://github.com/nodeshift/opossum/blob/master/package-support.json"&gt;Opossum&lt;/a&gt;, one of our modules:&lt;/p&gt; &lt;pre&gt;{ "versions": [ { "version": "*", "target": { "node": "lts" }, "response": { "type": "regular-7" }, "backing": { "company": "true" } } ] } &lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s unpack the fields here:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;First, we have the top-level &lt;code&gt;versions&lt;/code&gt; property, which in our case is an array. This property contains information for a package version range. We have only one entry in our array.&lt;/li&gt; &lt;li&gt;The next field is &lt;code&gt;version&lt;/code&gt;, which specifies the module version or versions that are supported. This could be a &lt;a target="_blank" rel="nofollow" href="https://semver.org"&gt;semantic versioning&lt;/a&gt; (SemVer) range, but in our case, we use &lt;code&gt;*&lt;/code&gt;, signifying all versions.&lt;/li&gt; &lt;li&gt;Next, we have the &lt;code&gt;target&lt;/code&gt; property, which tells us the platform version we&amp;#8217;ll support. In our case, we are running on Node.js and plan to support currently active long-term support (LTS) versions. This means that as Node.js versions become LTS, we will support them. Similarly, as Node.js versions enter end-of-life (EOL), we will no longer support them.&lt;/li&gt; &lt;li&gt;We next specify that our &lt;code&gt;response&lt;/code&gt; is &lt;code&gt;regular-7&lt;/code&gt;, which means that dedicated folks maintain this package and users can expect a response within seven days or fewer.&lt;/li&gt; &lt;li&gt;Lastly, our &lt;code&gt;backing&lt;/code&gt; property is set to &lt;code&gt;company&lt;/code&gt;, because it is part of our day job to maintain these packages.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Each of these fields has more advanced options, so please see the &amp;#8220;Format and Structure&amp;#8221; section of the &lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/package-maintenance/blob/main/docs/PACKAGE-SUPPORT.md#format-and-structure"&gt;package maintenance team documents&lt;/a&gt; to learn more.&lt;/p&gt; &lt;h2&gt;Validating support information (@pkgjs/support)&lt;/h2&gt; &lt;p&gt;Now that we have added the support file to our module, we, as maintainers of the module, want to check that the information we added to the &lt;code&gt;package.json&lt;/code&gt; and the &lt;code&gt;package-support.json&lt;/code&gt; is valid.&lt;/p&gt; &lt;p&gt;For this, we can use a tool from the Node.js Package Maintenance Working Group called &lt;a target="_blank" rel="nofollow" href="https://www.npmjs.com/package/@pkgjs/support"&gt;@pkgjs/support&lt;/a&gt;. To start, we &lt;a target="_blank" rel="nofollow" href="https://github.com/pkgjs/support"&gt;run the validate&lt;/a&gt; command from our module&amp;#8217;s root to make sure it is valid:&lt;/p&gt; &lt;pre&gt;npx @pkgjs/support validate &lt;/pre&gt; &lt;p&gt;Because we are using GitHub actions, weâve put this command in our continuous integration (CI) pipeline to test that our support information is valid whenever the integration is run. We also package consumers, and our module has dependencies, so we add another important command called &lt;code&gt;show&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;npx @pkgjs/support show &lt;/pre&gt; &lt;p&gt;This command allows us to view and understand the support information that other maintainers might provide. Right now, the command&amp;#8217;s implementation is very basic, but we expect it to evolve and grow over time, much like the tools that use the license information provided in &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;As you&amp;#8217;ve seen, adding support information for a Node.js module can be very simple and beneficial to the module&amp;#8217;s users and the Node.js module ecosystem as a whole. We hope you join us in adding the recommended support information to your modules. We believe itâs a good way for a maintainer to help set expectations. As Node.js use becomes more widespread, support information will be important to ensure a good match between users&amp;#8217; expectations and the modules they use.&lt;/p&gt; &lt;p&gt;While this article only covers the basic commands, more advanced options are available. To learn more about the &lt;code&gt;@pkgjs/support&lt;/code&gt; tool or the Node.js Package Maintenance Working Group, see the project&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://github.com/pkgjs/support"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#38;linkname=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#38;linkname=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#38;linkname=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#38;linkname=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#38;linkname=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#38;linkname=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#38;linkname=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#038;title=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" data-a2a-url="https://developers.redhat.com/blog/2021/02/10/add-standardized-support-information-to-your-node-js-modules/" data-a2a-title="Add standardized support information to your Node.js modules"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/10/add-standardized-support-information-to-your-node-js-modules/"&gt;Add standardized support information to your Node.js modules&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/GKMeyeZuwcY" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The Nodeshift team recently improved the consistency of the projects we use to maintain our Node.js modules. We made sure that the same linter and testsâESLint and Tape, for those interestedâwere used on all projects. We also added support information for the modules we publish to the npm registry. We looked to the Node.js Package [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/10/add-standardized-support-information-to-your-node-js-modules/"&gt;Add standardized support information to your Node.js modules&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/10/add-standardized-support-information-to-your-node-js-modules/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">853117</post-id><dc:creator>Lucas Holmquist</dc:creator><dc:date>2021-02-10T08:00:47Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/10/add-standardized-support-information-to-your-node-js-modules/</feedburner:origLink></entry><entry><title>How to activate your no-cost Red Hat Enterprise Linux subscription</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/BAY1C9kw4cA/" /><category term="Linux" /><category term="Operating System" /><category term="download rhel" /><category term="No-cost RHEL" /><category term="RHEL" /><category term="RHEL subscription" /><author><name>Miroslav SuchÃ½</name></author><id>https://developers.redhat.com/blog/?p=867017</id><updated>2021-02-10T08:00:23Z</updated><published>2021-02-10T08:00:23Z</published><content type="html">&lt;p&gt;A few weeks ago, we announced the new, &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/new-year-new-red-hat-enterprise-linux-programs-easier-ways-access-rhel"&gt;no-cost Red Hat Enterprise Linux (RHEL) subscription&lt;/a&gt;. Here&amp;#8217;s a quick guide for developers who want to set up a subscription and start using it right away.&lt;/p&gt; &lt;h2&gt;Step 1: Make sure you have a Red Hat account&lt;/h2&gt; &lt;p&gt;Do you already have a Red Hat account? If not, you&amp;#8217;ll need to set one up. Navigate to the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/"&gt;Red Hat Customer Portal&lt;/a&gt;Â and click on the account (person) icon in the upper-right corner, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_867037" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl1.png"&gt;&lt;img aria-describedby="caption-attachment-867037" class="wp-image-867037 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl1-1024x329.png" alt="The account icon is shown in the upper-right corner of the Red Hat Customer Portal." width="640" height="206" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl1-1024x329.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl1-300x96.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl1-768x247.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-867037" class="wp-caption-text"&gt;Figure 1: Click the account icon in the upper-right corner.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You will get the options to log in or register, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_867047" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl2.png"&gt;&lt;img aria-describedby="caption-attachment-867047" class="wp-image-867047 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl2-1024x344.png" alt="Users may log in or register for access to the Red Hat Customer Portal." width="640" height="215" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl2-1024x344.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl2-300x101.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl2-768x258.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-867047" class="wp-caption-text"&gt;Figure 2: Log in or register for a new account.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you don&amp;#8217;t already have an account, click &lt;b&gt;Register&lt;/b&gt; and follow the instructions. You will be done with the registration within one minute.&lt;/p&gt; &lt;h2&gt;Step 2: Download no-cost RHEL&lt;/h2&gt; &lt;p&gt;Navigate to &lt;a href="https://developers.redhat.com/"&gt;Red Hat Developer&lt;/a&gt; and log in to your Red Hat account. Click the &lt;b&gt;Linux&lt;/b&gt; link at the top of the page, then &lt;b&gt;Download RHEL&lt;/b&gt;. Once you are on the &lt;a href="https://developers.redhat.com/products/rhel/download"&gt;RHEL download page&lt;/a&gt;, you will see options to download an ISO image of RHEL, currently in version 8.3.0.&lt;/p&gt; &lt;p&gt;You can now use RHEL at no cost. Alternatively, you could set up an &lt;a target="_blank" rel="nofollow" href="https://dzone.com/articles/set-up-aws-ec2-instance-redhat-enterprise-linux-8"&gt;Amazon Web Services Elastic Compute Cloud (AWS EC2) RHEL instance&lt;/a&gt;Â or use it another way.&lt;/p&gt; &lt;h2&gt;Step 3: Register your RHEL subscription&lt;/h2&gt; &lt;p&gt;On your system with Red Hat Enterprise Linux installed, run&lt;/p&gt; &lt;pre&gt;subscription-manager register --username=admin --password=secret &lt;/pre&gt; &lt;p&gt;Your system can now consume all the content from Red Hat, including the latest security errata.&lt;/p&gt; &lt;h2&gt;About your no-cost RHEL subscription&lt;/h2&gt; &lt;p&gt;You can check the details of your no-cost RHEL subscription on the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/management"&gt;Red Hat Subscription Management page&lt;/a&gt;, which is shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_867067" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl3.png"&gt;&lt;img aria-describedby="caption-attachment-867067" class="wp-image-867067 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl3-1024x334.png" alt="Screenshot of the Red Hat Subscription Management page." width="640" height="209" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl3-1024x334.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl3-300x98.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl3-768x251.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-867067" class="wp-caption-text"&gt;Figure 3: Subscription details on the Red Hat Subscription Management page.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Click &lt;b&gt;Active Subscriptions&lt;/b&gt; followed by &lt;b&gt;Subscription Name&lt;/b&gt; and &lt;b&gt;Red Hat Developer Subscription&lt;/b&gt;. You will see the page in Figure 4, which describes your Red Hat Developer subscription.&lt;/p&gt; &lt;div id="attachment_867077" style="width: 502px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl4.png"&gt;&lt;img aria-describedby="caption-attachment-867077" class="wp-image-867077 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl4-492x1024.png" alt="Screenshot of the Red Hat Developer subscription details page." width="492" height="1024" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl4-492x1024.png 492w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl4-144x300.png 144w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl4-768x1599.png 768w" sizes="(max-width: 492px) 100vw, 492px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-867077" class="wp-caption-text"&gt;Figure 4: Red Hat Developer subscription details.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Registering for your no-cost RHEL subscription is a simple, three-step process. Once your subscription is active, you can use your Red Hat Enterprise Linux instance in various ways, including running it as an AWS EC2 RHEL instance.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#38;linkname=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#38;linkname=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#38;linkname=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#38;linkname=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#38;linkname=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#38;linkname=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#38;linkname=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#038;title=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" data-a2a-url="https://developers.redhat.com/blog/2021/02/10/how-to-activate-your-no-cost-red-hat-enterprise-linux-subscription/" data-a2a-title="How to activate your no-cost Red Hat Enterprise Linux subscription"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/10/how-to-activate-your-no-cost-red-hat-enterprise-linux-subscription/"&gt;How to activate your no-cost Red Hat Enterprise Linux subscription&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/BAY1C9kw4cA" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;A few weeks ago, we announced the new, no-cost Red Hat Enterprise Linux (RHEL) subscription. Here&amp;#8217;s a quick guide for developers who want to set up a subscription and start using it right away. Step 1: Make sure you have a Red Hat account Do you already have a Red Hat account? If not, you&amp;#8217;ll [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/10/how-to-activate-your-no-cost-red-hat-enterprise-linux-subscription/"&gt;How to activate your no-cost Red Hat Enterprise Linux subscription&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/10/how-to-activate-your-no-cost-red-hat-enterprise-linux-subscription/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">867017</post-id><dc:creator>Miroslav SuchÃ½</dc:creator><dc:date>2021-02-10T08:00:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/10/how-to-activate-your-no-cost-red-hat-enterprise-linux-subscription/</feedburner:origLink></entry><entry><title type="html">Massive performance without headaches</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3licdpjx6-8/" /><author><name /></author><id>https://quarkus.io/blog/resteasy-reactive-faq/</id><updated>2021-02-10T00:00:00Z</updated><content type="html">The purpose of this blog post is to clear up some confusion about RESTEasy Reactive and answer some commonly asked questions around it. Acknowledgement This blog post would not have been possible without the expert advice of Clement Escoffier and StÃ©phane Ãpardaud Imperative and Reactive: the elevator pitch In our...&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3licdpjx6-8" height="1" width="1" alt=""/&gt;</content><dc:creator /><feedburner:origLink>https://quarkus.io/blog/resteasy-reactive-faq/</feedburner:origLink></entry></feed>
